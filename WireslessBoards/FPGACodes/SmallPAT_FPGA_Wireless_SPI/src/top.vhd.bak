library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity top is
	generic ( 
		NUM_OUTPUT : integer := 37;	-- number of transducers (maximum - 256)
		COUNTER_BITS : integer := 7;	-- resolution of the phase (0-255 when this value is maximum value, 8)
		CLKS_PER_BIT : integer := 4	-- determine the baudrate (baudrate = 50M / CLKS_PER_BIT)
	);
	port (
		CLK	  : in  STD_LOGIC; -- 50MHz clock input
		LED	  : out STD_LOGIC_VECTOR (3 downto 0); -- Outputs to the 8 onboard LEDs

		USB_RX  : in  STD_LOGIC;
		OUTPUTS : out STD_LOGIC_VECTOR (NUM_OUTPUT - 1 downto 0);
		REF	  : out STD_LOGIC
	);
end top;

architecture Behavioral of top is

	component Masterclock is
		port (
			inclk0 : in  std_logic;
			c0 	 : out std_logic );	-- 40k * 128 = 5.12MHz 
	end component;

	component Counter is
		generic (
			COUNTER_BITS: integer := 8 );
		port (
			clk_10M 	  : in  std_logic;
			sync_reset : in  std_logic;
			counter	  : out std_logic_vector (COUNTER_BITS-1 downto 0) );
	end component;

	component SerialReceiver is
		generic (
			CLKS_PER_BIT : integer := 4 );
		port (
			clk       : in  std_logic;
			rx_serial : in  std_logic;
			rx_en     : out std_logic;
			rx_byte   : out std_logic_vector(7 downto 0) );
	end component;

	component DataDistributor is
		generic(
			NUM_OUTPUT	 : integer := 256;
			COUNTER_BITS : integer := 8 );
		port (
			clk	  : in  std_logic;
			rx_en	  : in  std_logic;
			rx_byte : in  std_logic_vector (7 downto 0);
			enable  : out std_logic;
			flag	  : out std_logic;
			data	  : out std_logic_vector (COUNTER_BITS-1 downto 0);
			address : out std_logic_vector (7 downto 0);
			swap	  : out std_logic
		);
	end component;
	
	component SignalGenerator is
		generic (
			NUM_OUTPUT	 : integer := 256;
			COUNTER_BITS : integer := 8 );	
		port (
			clk	  : in  std_logic;
			clk_10M : in  std_logic;
			counter : in  std_logic_vector (COUNTER_BITS-1 downto 0);
			enable  : in  std_logic;
			flag	  : in  std_logic;
			data	  : in  std_logic_vector (COUNTER_BITS-1 downto 0);
			address : in  std_logic_vector (7 downto 0);
			swap	  : in  std_logic;
			outputs : out std_logic_vector (NUM_OUTPUT-1 downto 0) );
	end component;

   signal outputs_s	 : std_logic_vector(NUM_OUTPUT - 1 downto 0) := (others => '0');
	signal led_s		 : std_logic_vector (3 downto 0) := (others => '0');

   signal clk_10M		 : std_logic := '0';
	signal sync_reset	 : std_logic := '0';
   signal counter_40k : std_logic_vector(COUNTER_BITS-1 downto 0) := (others => '0');
	
	signal rx_en		 : std_logic := '0';
   signal rx_byte		 : std_logic_vector(7 downto 0) := (others => '0');
	
	signal enable		 : std_logic := '0';
	signal flag			 : std_logic := '0';
   signal data			 : std_logic_vector(COUNTER_BITS-1 downto 0) := (others => '0');
   signal address		 : std_logic_vector(7 downto 0) := (others => '0');
	signal swap			 : std_logic := '0';
	
begin
	
	LED     <= not led_s;
	OUTPUTS <= outputs_s;
	REF     <= counter_40k(COUNTER_BITS-1);
	
	inst_Masterclock : Masterclock 
		port map (
			inclk0 => clk,
			c0		 => clk_10M );

	inst_Counter : Counter 
	   generic map (
			COUNTER_BITS => COUNTER_BITS )
		port map (
			clk_10M	  => clk_10M,
			sync_reset => sync_reset,
			counter	  => counter_40k );

	inst_SerialReceiver : SerialReceiver 
	   generic map (
			CLKS_PER_BIT => CLKS_PER_BIT )
		port map (
			clk		 => clk,
			rx_serial => USB_RX,
			rx_en		 => rx_en,
			rx_byte	 => rx_byte );

	inst_DataDistributor : DataDistributor 
	   generic map (
			NUM_OUTPUT	 => NUM_OUTPUT,
			COUNTER_BITS => COUNTER_BITS )
		port map (
			clk	  => clk,
			rx_en	  => rx_en,
			rx_byte => rx_byte,
			enable  => enable,
			flag	  => flag,
			data	  => data,
			address => address,
			swap	  => swap );
			
	inst_SignalGenerator : SignalGenerator
	   generic map (
			NUM_OUTPUT	 => NUM_OUTPUT,
			COUNTER_BITS => COUNTER_BITS )
		port map (
			clk	  => clk,
			clk_10M => clk_10M,
			counter => counter_40k,
			enable  => enable,
			flag	  => flag,
			data	  => data,
			address => address,
			swap	  => swap,
			outputs => outputs_s );

end Behavioral;